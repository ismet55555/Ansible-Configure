# Update and Modify raspi-config
#
# For more information and details:
#     https://www.raspberrypi.org/documentation/configuration/raspi-config.md
#     https://github.com/RPi-Distro/raspi-config/blob/master/raspi-config

---
- name: Update and Modify raspi-config
  hosts: all
  remote_user: pi
  become: True
  gather_facts: True
  
  vars:
    REBOOT: True         # Reboot at the end of this playbook
    UPDATE: True         # Update raspi-config itself
    BOOTBEHAVIOUR: "B2"  # B1:cli, B2:cli autologin, B3:desktop, B4:desktop autologin

    CHANGE_USER_PASSWORD: False # Changing the pi user password if true
    USER_PASSWORD: "raspberry"  # Password for the default user, "pi"
    
    CHANGE_HOSTNAME: True                # Change the hostname from default "raspberrypi"
    HOSTNAME: "{{ inventory_hostname }}" # Hostname alias for this device to inventory hostname
    
    CHANGE_LOCALE_INFO: False     # Change any of the locale/location/keyboard information
    LOCALE: "en_US.UTF-8"         # Locale Designation
    TIMEZONE: "America/New_York"  # See: https://docs.aws.amazon.com/redshift/latest/dg/time-zone-names.html
    XKBLAYOUT: "us"               # Keyboard Layout

    CHANGE_WIFI: False                    # Change anything WiFi Related
    WIFI_COUNTRY: "US"                    # WiFi Region Code
    SSID: "YOUR COOL WIFI NAME"           # WiFi network name
    PASSPHRASE: "YOUR COOL WIFI PASSWORD" # Password to the WiFi

    SSH: True       # Command line access to the pi via SSH protocol
    SERIAL: False   # Shell and kernel messages on the serial connection
    CAMERA: False   # Connection to the Raspberry Pi Camera
    VNC: False      # Graphical remote desktop access to your Pi using RealVNC
    SPI: False      # Automatic loading of SPI kernel module
    I2C: False      # Automatic loading of I2C kernel module
    ONEWIRE: False  # 1-Wire Interface
    RGPIO: False    # Enable remote access to GPIO Pins

    MEMSPLIT: "16"    # Set memory split for GPU (eg. 16/32/64/128/256 MB)
    NETNAMES: False   # Network interface names - Enable/Disable predictable network interface names
    BOOTWAIT: 1       # Wait for network at boot (0: Enabled, 1: Disabled)  TODO: Make True/False
    BOOTSPLASH: 1     # Show the splash screen (0:Enabled, 1: Disabled)     TODO: Make True/False
    OVERSCAN: False   # May need to configure overscan if black bars are present on display
    PIXDUB: False     # Pixel doubling
    AUDIO_OUT: "0"    # Audio Output - 0:Auto, 1:Force 3.5mm, 2:Force HDMI

  tasks:
    # Update
    - name: Update raspi-config Itself
      become: true
      apt: name=raspi-config update_cache=yes state=present cache_valid_time=3600
      when: UPDATE == True

    # Update user Password
    - name: Updating pi User Password
      user:
        name: pi
        password: "{{ USER_PASSWORD }}"
      when: CHANGE_USER_PASSWORD == True

    # Get some Basic Info
    - name: Get Raspberry Pi Type
      shell: "raspi-config nonint get_pi_type"
      register: pi_type
      changed_when: False

    - name: Show pi version
      debug:
        msg: "Pi version: {{ pi_type.stdout }}"


#2 Network Options

    #N1 Hostname
    - name: Get Hostname
      shell: raspi-config nonint get_hostname
      register: pi_hostname
      changed_when: False
      
    - name: Print Current Hostname
      debug:
        msg: "Hostname current: {{ pi_hostname.stdout }} | target: {{ HOSTNAME }}"

    - name: Change Hostname
      shell: raspi-config nonint do_hostname {{ HOSTNAME }}
      when: CHANGE_HOSTNAME == True

    #N2 Wi-fi
    - name: Set WiFi credentials
      shell: "raspi-config nonint do_wifi_ssid_passphrase {{ SSID }} {{ PASSPHRASE }}"
      when: CHANGE_WIFI == True
    
    #N3 Network interface names
    - name: Get network names status
      shell: "raspi-config nonint get_net_names"
      register: pi_netnames
      changed_when: False

    - name: Print current network names status
      debug:
        msg: "Current network names status: {{ pi_netnames.stdout }}"

    - name: Enable network names
      shell: "raspi-config nonint do_net_names 0"
      when: (NETNAMES == True) and (pi_netnames.stdout != '0')

    - name: Disable network names
      shell: "raspi-config nonint do_net_names 1"
      when: (NETNAMES == False) and (pi_netnames.stdout != '1')


#3 Boot Options

    #B1 Desktop / CLI
    - name: Get boot CLI
      shell: "raspi-config nonint get_boot_cli"
      register: boot_cli
      changed_when: False

    - name: Print boot CLI
      debug: 
        msg: "Boot CLI is: {{ boot_cli.stdout }}"

    - name: Get boot autologin
      shell: "raspi-config nonint get_autologin"
      register: auto_login
      changed_when: False

    - name: Print boot autologin status
      debug: 
        msg: "Boot autologin is: {{ auto_login.stdout }}"

    #B1 cli, B2 cli autologin, B3 desktop, B4 desktop autologin
    - name: Set Boot behaviour
      shell: "raspi-config nonint do_boot_behaviour {{ BOOTBEHAVIOUR }}"

    #B2 Wait for Network at Boot
    - name: Get boot wait for network status
      shell: "raspi-config nonint get_boot_wait"
      register: boot_wait
      changed_when: False

    - name: Print boot wait for network status
      debug: 
        msg: "Boot wait is: {{ boot_wait.stdout }}"

    - name: Set boot wait network status
      shell: "raspi-config nonint do_boot_wait {{ BOOTWAIT }}"

    #B3 Splash Screen
    - name: Get splash status
      shell: "raspi-config nonint get_boot_splash"
      register: boot_splash
      changed_when: False

    - name: Print boot splash status
      debug: 
        msg: "Boot splash status is: {{ boot_splash.stdout }}"

    # - name: Set boot splash
    #   shell: "raspi-config nonint do_boot_splash {{ BOOTSPLASH }}"


#4 Localisation Options

    #I1 Change Locale
    - name: Change locale
      shell: "raspi-config nonint do_change_locale {{ LOCALE }}"
      when: CHANGE_LOCALE_INFO == True

    #I2 Change Timezone
    - name: Change timezone
      shell: "raspi-config nonint do_change_timezone {{ TIMEZONE }}"
      when: CHANGE_LOCALE_INFO == True

    #I3 Change Keyboard Layout
    - name: Change keyboard layout
      shell: "raspi-config nonint do_configure_keyboard {{ XKBLAYOUT }}"
      when: CHANGE_LOCALE_INFO == True

    #I4 Change Wi-fi Country
    - name: Get WiFi country
      shell: "raspi-config nonint get_wifi_country"
      register: wifi_country
      changed_when: False
      ignore_errors: True #to avoid error when WiFi is not present

    - name: Print current WiFi country
      debug: 
        msg: "Wifi country is: {{ wifi_country.stdout }}" 

    - name: Set WiFi country
      shell: "raspi-config nonint do_wifi_country {{ WIFI_COUNTRY }}"


#5 Interfacing Options
        
    #P1 CAMERA
    - name: Get camera status
      shell: "raspi-config nonint get_camera"
      register: camera_status
      changed_when: False

    - name: Print camera status
      debug:
        msg: "Camera status is: {{ camera_status.stdout }}"

    - name: Enable Camera
      shell: "raspi-config nonint do_camera 0"
      when: (CAMERA == True) and (camera_status.stdout != '0')

    - name: Disable Camera
      shell: "raspi-config nonint do_camera 1"
      when: (CAMERA == False) and (camera_status.stdout != '1')

    #P2 SSH
    - name: Check if SSH is enabled or not
      shell: "raspi-config nonint get_ssh"
      register: ssh_status
      changed_when: False

    - name: Print SSH status
      debug: 
        msg: "SSH status is: {{ ssh_status.stdout }}"

    - name: Enable SSH
      shell: "raspi-config nonint do_ssh 0"
      when: (SSH == True) and (ssh_status.stdout != '0')

    - name: Disable SSH
      shell: "raspi-config nonint do_ssh 1"
      when: (SSH == False) and (ssh_status.stdout != '1')

    #P3 VNC
    - name: Get VNC status
      shell: "raspi-config nonint get_vnc"
      register: vnc_status
      changed_when: False

    - name: Print VNC status
      debug:
        msg: "VNC status is: {{ vnc_status.stdout }}"

    - name: Enable VNC
      shell: "raspi-config nonint do_vnc 0"
      when: (VNC == True) and (vnc_status.stdout != '0')

    - name: Disable VNC
      shell: "raspi-config nonint do_vnc 1"
      when: (VNC == False) and (vnc_status.stdout != '1')

    #P4 SPI
    - name: Get SPI status
      shell: "raspi-config nonint get_spi"
      register: spi_status
      changed_when: False

    - name: Print SPI status
      debug:
        msg: "SPI status is: {{ spi_status.stdout }}"

    - name: Enable SPI
      shell: "raspi-config nonint do_spi 0"
      when: (SPI == True) and (spi_status.stdout != '0')

    - name: Disable SPI
      shell: "raspi-config nonint do_spi 1"
      when: (SPI == False) and (spi_status.stdout != '1')

    #P5 I2C
    - name: Get I2C status
      shell: "raspi-config nonint get_i2c"
      register: i2c_status
      changed_when: False

    - name: Print I2C status
      debug:
        msg: "I2C status is: {{ i2c_status.stdout }}"

    - name: Enable I2C
      shell: "raspi-config nonint do_i2c 0"
      when: (I2C == True) and (i2c_status.stdout != '0')

    - name: Disable I2C
      shell: "raspi-config nonint do_i2c 1"
      when: (I2C == False) and (i2c_status.stdout != '1')

    #P6 Serial
    - name: Get serial status
      shell: "raspi-config nonint get_serial"
      register: serial_status
      changed_when: False

    - name: Get serialHW status
      shell: "raspi-config nonint get_serial_hw"
      register: serialhw_status
      changed_when: False

    - name: Print serial status
      debug:
        msg: "Serial status is: {{ serial_status.stdout }}"

    - name: Print serialHW status
      debug:
        msg: "SerialHW status is: {{ serialhw_status.stdout }}"

    - name: Enable serial
      shell: "raspi-config nonint do_serial 0"
      when: (SERIAL == True) and (serial_status.stdout != '0')

    - name: Disable serial
      shell: "raspi-config nonint do_serial 1"
      when: (SERIAL == False) and (serial_status.stdout != '1')

    #P7 1-Wire
    - name: Get Onewire status
      shell: "raspi-config nonint get_onewire"
      register: onewire_status
      changed_when: False

    - name: Print Onewire status
      debug:
        msg: "Onewire status is: {{ onewire_status.stdout }}"

    - name: Enable OneWire
      shell: "raspi-config nonint do_onewire 0"
      when: (ONEWIRE == True) and (onewire_status.stdout != '0')

    - name: Disable OneWire
      shell: "raspi-config nonint do_onewire 1"
      when: (ONEWIRE == False) and (onewire_status.stdout != '1')

    #P8 Remote GPIO
    - name: Get rGPIO status
      shell: "raspi-config nonint get_rgpio"
      register: rgpio_status
      changed_when: False

    - name: Print rGPIO status
      debug:
        msg: "rGPIO status is: {{ rgpio_status.stdout }}"

    - name: Enable Remote GPIO
      shell: "raspi-config nonint do_rgpio 0"
      when: (RGPIO == True) and (rgpio_status.stdout != '0')

    - name: Disable Remote GPIO
      shell: "raspi-config nonint do_rgpio 1"
      when: (RGPIO == False) and (rgpio_status.stdout != '1')


#7 Advanced Options 

    #A2 Overscan
    - name: Get Overscan status
      shell: "raspi-config nonint get_overscan"
      register: pi_overscan
      changed_when: False

    - name: Print Overscan
      debug: 
        msg: "Boot overscan is: {{ pi_overscan.stdout }}"

    - name: Enable Overscan
      shell: "raspi-config nonint do_overscan {{ OVERSCAN }}"
      when: OVERSCAN == True

    #A3 Memory Split
    - name: Get current GPU memory split (1/4)
      shell: "raspi-config nonint get_config_var gpu_mem /boot/config.txt"
      register: gpu_mem
      changed_when: False

    - name: Get current GPU memory split 256 (2/4)
      shell: "raspi-config nonint get_config_var gpu_mem_256 /boot/config.txt"
      register: gpu_mem_256
      changed_when: False

    - name: Get current GPU memory split 512 (3/4)
      shell: "raspi-config nonint get_config_var gpu_mem_512 /boot/config.txt"
      register: gpu_mem_512
      changed_when: False

    - name: Get current GPU memory split 1024 (4/4)
      shell: "raspi-config nonint get_config_var gpu_mem_1024 /boot/config.txt"
      register: gpu_mem_1k
      changed_when: False

    - name: Print current GPU memory split
      debug:
        msg: "Current GPU memory split: {{ gpu_mem.stdout }} - {{ gpu_mem_256.stdout }} - {{ gpu_mem_512.stdout }} - {{ gpu_mem_1k.stdout }}"

    - name: Set GPU memory split
      shell: "raspi-config nonint do_memory_split {{ MEMSPLIT }}"
      #when: gpu_mem.stdout != MEMSPLIT

    #A4 Audio
    ### 0 Auto, 1 Force 3.5mm, 2 Force hdmi
    - name: Set audio out
      shell: "raspi-config nonint do_audio {{ AUDIO_OUT }}"
    
    #A6 Pixel Doubling
    - name: Get pixel doubling
      shell: "raspi-config nonint get_pixdub"
      register: pixdub_status
      changed_when: False

    - name: Print pixel doubling status
      debug: 
        msg: "Pixel Doubling is: {{ pixdub_status.stdout }}"

    - name: Enable pixel doubling
      shell: "raspi-config nonint do_pixdub 0"
      when: (PIXDUB == True) and (pixdub_status.stdout != '0')

    - name: Disable pixel doubling
      shell: "raspi-config nonint do_onewire 1"
      when: (PIXDUB == False) and (pixdub_status.stdout != '1')


# Rebooting
    - name: Rebooting Device
      become: True
      shell: "sleep 1 && shutdown -r now +1"
      async: 1
      poll: 0
      notify:
        - Wait-For-Device-Reboot
      when: REBOOT == True

  # Playbook Handlers
  handlers:
    - name: Wait-For-Device-Reboot
      wait_for_connection:
        delay: "5"
        timeout: "300"
